legend("topleft",legend=thiskeywords,lwd=1,col=mycols,cex=0.6,ncol=2)
plot(res_end_plot$year,rep(1,nyears),col="white",ylim=c(0,max(res_end_plot[,3:myncols]/res_end_plot$n_all,na.rm=T)),main="Number of Articles / Articles per year - corrected by all articles")
for (i in 3:myncols){
points(years,n_kw/n_all,type="l",col=mycols[i-2])}
plot(years,rep(1,nyears),col="white",ylim=c(0,0.00001),main="Number of Articles / Articles per year - normalized (same sum for each keyword)")
for (i in 3:myncols){
points(years,n_kw/n_all/sum(n_kw,na.rm=T),type="l",col=mycols[i-2])}#*10000
par(mfrow=c(1,1));  dev.off()
}
mycols=c(1:13,"orange")
for (j in 4){
jpeg(paste("C:/Users/naxo/Dropbox/develop/datasc_ibm/word_counts_ds_",j,".jpeg",sep=""),width=1200,height=800,quality = 100,units="px",pointsize = 22)
if (j==1) {cols=c(1,2,3:14)}
if (j==2) {cols=c(1,2,12:20)}
if (j==3) {cols=c(1,2,21:29)}
if (j==4) {cols=c(1,2,c(30:39)-27)}
res_end_plot=res_end[,cols]
myncols=ncol(res_end_plot)
thiskeywords=colnames(res_end_plot)[c(-1,-2)]
par(mfrow=c(2,2))
years=res_end_plot$year; n_all=res_end_plot$n_all; n_kw=res_end_plot[,i]; nyears=length(years)
plot(years,n_all)
plot(years,rep(1,nyears),col="white",ylim=c(0,max(res_end_plot[,3:myncols],na.rm=T)),main="Number of Articles related to ...")
for (i in 3:(myncols)){points(years,n_kw,type="l",col=mycols[i-2])}
legend("topleft",legend=thiskeywords,lwd=1,col=mycols,cex=0.6,ncol=2)
plot(res_end_plot$year,rep(1,nyears),col="white",ylim=c(0,max(res_end_plot[,3:myncols]/res_end_plot$n_all,na.rm=T)),main="Number of Articles / Articles per year - corrected by all articles")
for (i in 3:myncols){
points(years,n_kw/n_all,type="l",col=mycols[i-2])}
plot(years,rep(1,nyears),col="white",ylim=c(0,0.00001),main="Number of Articles / Articles per year - normalized (same sum for each keyword)")
for (i in 3:myncols){
points(years,n_kw/n_all/sum(n_kw,na.rm=T),type="l",col=mycols[i-2])}#*10000
par(mfrow=c(1,1));  dev.off()
}
dev.off()
dev.off()
mycols=c(1:13,"orange")
for (j in 4){
jpeg(paste("C:/Users/naxo/Dropbox/develop/datasc_ibm/word_counts_ds_",j,".jpeg",sep=""),width=1200,height=800,quality = 100,units="px",pointsize = 22)
if (j==1) {cols=c(1,2,3:14)}
if (j==2) {cols=c(1,2,12:20)}
if (j==3) {cols=c(1,2,21:29)}
if (j==4) {cols=c(1,2,c(30:39)-27)}
res_end_plot=res_end[,cols]
myncols=ncol(res_end_plot)
thiskeywords=colnames(res_end_plot)[c(-1,-2)]
par(mfrow=c(2,2))
years=res_end_plot$year; n_all=res_end_plot$n_all; n_kw=res_end_plot[,i]; nyears=length(years)
plot(years,n_all)
plot(years,rep(1,nyears),col="white",ylim=c(0,max(res_end_plot[,3:myncols],na.rm=T)),main="Number of Articles related to ...")
for (i in 3:(myncols)){points(years,n_kw,type="l",col=mycols[i-2])}
legend("topleft",legend=thiskeywords,lwd=1,col=mycols,cex=0.6,ncol=2)
plot(res_end_plot$year,rep(1,nyears),col="white",ylim=c(0,max(res_end_plot[,3:myncols]/res_end_plot$n_all,na.rm=T)),main="Number of Articles / Articles per year - corrected by all articles")
for (i in 3:myncols){
points(years,n_kw/n_all,type="l",col=mycols[i-2])}
plot(years,rep(1,nyears),col="white",ylim=c(0,0.00001),main="Number of Articles / Articles per year - normalized (same sum for each keyword)")
for (i in 3:myncols){
points(years,n_kw/n_all/sum(n_kw,na.rm=T),type="l",col=mycols[i-2])}#*10000
par(mfrow=c(1,1));  dev.off()
}
dev.off()
j
res_end_plot=res_end[,cols]
myncols=ncol(res_end_plot)
thiskeywords=colnames(res_end_plot)[c(-1,-2)]
par(mfrow=c(2,2))
years=res_end_plot$year; n_all=res_end_plot$n_all; n_kw=res_end_plot[,i]; nyears=length(years)
mycols=c(1:13,"orange")
for (j in 4){
jpeg(paste("C:/Users/naxo/Dropbox/develop/datasc_ibm/word_counts_ds_",j,".jpeg",sep=""),width=1200,height=800,quality = 100,units="px",pointsize = 22)
if (j==1) {cols=c(1,2,3:14)}
if (j==2) {cols=c(1,2,12:20)}
if (j==3) {cols=c(1,2,21:29)}
if (j==4) {cols=c(1,2,c(30:40)-27)}
res_end_plot=res_end[,cols]
myncols=ncol(res_end_plot)
thiskeywords=colnames(res_end_plot)[c(-1,-2)]
par(mfrow=c(2,2))
years=res_end_plot$year; n_all=res_end_plot$n_all; n_kw=res_end_plot[,i]; nyears=length(years)
plot(years,n_all)
plot(years,rep(1,nyears),col="white",ylim=c(0,max(res_end_plot[,3:myncols],na.rm=T)),main="Number of Articles related to ...")
for (i in 3:(myncols)){points(years,res_end_plot[,i],type="l",col=mycols[i-2])}
legend("topleft",legend=thiskeywords,lwd=1,col=mycols,cex=0.6,ncol=2)
plot(res_end_plot$year,rep(1,nyears),col="white",ylim=c(0,max(res_end_plot[,3:myncols]/res_end_plot$n_all,na.rm=T)),main="Number of Articles / Articles per year - corrected by all articles")
for (i in 3:myncols){
points(years,res_end_plot[,i]/n_all,type="l",col=mycols[i-2])}
plot(years,rep(1,nyears),col="white",ylim=c(0,0.00001),main="Number of Articles / Articles per year - normalized (same sum for each keyword)")
for (i in 3:myncols){
points(years,res_end_plot[,i]/n_all/sum(res_end_plot[,i],na.rm=T),type="l",col=mycols[i-2])}#*10000
par(mfrow=c(1,1));  dev.off()
}
source('C:/Users/naxo/Dropbox/develop/datasc_ibm/test01.R')
kw="Big Data"
cat("Calculate ",kw,"...\n",sep="")
query=list(api_key=apikey,q=paste("",kw,"",sep=""),facet_date="1year",limit="1")
resp01=GET(host,path="content",query=query); #print(resp01)
json=content(resp01,as="text")
res01=fromJSON(json,simplifyVector=FALSE); #print(res01)
res02=as.data.frame(unlist(res01$facets$release_date))
res02$year=substr(rownames(res02),1,4)
res02=res02[!(rownames(res02) %in% c("start","end","gap")),]
colnames(res02)[1]=paste("n_",kw,sep=""); rownames(res02)=res02$year;
res02[,1]=as.numeric(as.character(res02[,1])); res02[,2]=as.numeric(as.character(res02[,2]))
res02
res02[,order(res02$year)]
res02[,order(res02$year)]
res02[order(res02$year),]
kw="Big+Data"
cat("Calculate ",kw,"...\n",sep="")
query=list(api_key=apikey,q=paste("",kw,"",sep=""),facet_date="1year",limit="1")
resp01=GET(host,path="content",query=query); #print(resp01)
json=content(resp01,as="text")
res01=fromJSON(json,simplifyVector=FALSE); #print(res01)
res02=as.data.frame(unlist(res01$facets$release_date))
res02$year=substr(rownames(res02),1,4)
res02=res02[!(rownames(res02) %in% c("start","end","gap")),]
colnames(res02)[1]=paste("n_",kw,sep=""); rownames(res02)=res02$year;
res02[,1]=as.numeric(as.character(res02[,1])); res02[,2]=as.numeric(as.character(res02[,2]))
res02[order(res02$year),]
res01
res02[order(res02$year),]
cat("Calculate ",kw,"...\n",sep="")
query=list(api_key=apikey,q=paste("",kw,"",sep=""),facet_date="1year",limit="1",sort="release_date")
resp01=GET(host,path="content",query=query); #print(resp01)
json=content(resp01,as="text")
res01=fromJSON(json,simplifyVector=FALSE); #print(res01)
res01
cat("Calculate ",kw,"...\n",sep="")
query=list(api_key=apikey,q=paste("",kw,"",sep=""),facet_date="1year",limit="1",sort="release_date")
resp01=GET(host,path="content",query=query); #print(resp01)
json=content(resp01,as="text")
res01=fromJSON(json,simplifyVector=FALSE); #print(res01)
res01
cat("Calculate ",kw,"...\n",sep="")
query=list(api_key=apikey,q=paste("",kw,"",sep=""),facet_date="1year",limit="1")#,sort="release_date")
resp01=GET(host,path="content",query=query); #print(resp01)
json=content(resp01,as="text")
res01=fromJSON(json,simplifyVector=FALSE); #print(res01)
res01
cat("Calculate ",kw,"...\n",sep="")
query=list(api_key=apikey,q=paste("",kw,"",sep=""),facet_date="1year",limit="1",sort="release_date")
resp01=GET(host,path="content",query=query); #print(resp01)
json=content(resp01,as="text")
res01=fromJSON(json,simplifyVector=FALSE); #print(res01)
res01
query=list(api_key=apikey,q="schlaf",release_date="2016-01-01 TO 2017-12-31")
resp01=GET(host,path="content",query=query); print(resp01)
res02[order(res02$year),]
kw
query=list(api_key=apikey,q=kw,release_date="2019-01-01 TO 2019-12-31")
resp01=GET(host,path="content",query=query); print(resp01)
json=content(resp01,as="text")
res01=fromJSON(json,simplifyVector=FALSE); #print(res01)
res01
res02[order(res02$year),]
res01
query=list(api_key=apikey,q="Big%20Data",release_date="2019-01-01 TO 2019-12-31")
resp01=GET(host,path="content",query=query); print(resp01)
res02[order(res02$year),]
json=content(resp01,as="text")
res01=fromJSON(json,simplifyVector=FALSE); #print(res01)
res01
"\"Big%20Data\""
query=list(api_key=apikey,q="\"Big%20Data\"",release_date="2019-01-01 TO 2019-12-31")
resp01=GET(host,path="content",query=query); print(resp01)
json=content(resp01,as="text")
res01=fromJSON(json,simplifyVector=FALSE); #print(res01)
res01
query=list(api_key=apikey,q="Big%20Data,release_date="2019-01-01 TO 2019-12-31")
resp01=GET(host,path="content",query=query); print(resp01)
query=list(api_key=apikey,q="Big%20Data",release_date="2019-01-01 TO 2019-12-31")
resp01=GET(host,path="content",query=query); print(resp01)
query=list(api_key=apikey,q='"Big%20Data"',release_date="2019-01-01 TO 2019-12-31")
resp01=GET(host,path="content",query=query); print(resp01)
query=list(api_key=apikey,q="'"Big%20Data"'",release_date="2019-01-01 TO 2019-12-31")
resp01=GET(host,path="content",query=query); print(resp01)
query=list(api_key=apikey,q="'"Big%20Data"'",release_date="2019-01-01 TO 2019-12-31")
resp01=GET(host,path="content",query=query); print(resp01)
cat
cat("abc")
cat("\"abc")
cat("\"abc\")
cat("\"abc\"")
query=list(api_key=apikey,q="\"Big%20Data\"",release_date="2019-01-01 TO 2019-12-31")
resp01=GET(host,path="content",query=query); print(resp01)
query=list(api_key=apikey,q="\"Big Data\"",release_date="2019-01-01 TO 2019-12-31")
resp01=GET(host,path="content",query=query); print(resp01)
res01
json=content(resp01,as="text")
res01=fromJSON(json,simplifyVector=FALSE); #print(res01)
res01
source('C:/Users/naxo/Dropbox/develop/datasc_ibm/test01.R')
source('C:/Users/naxo/Dropbox/develop/datasc_ibm/test01.R')
source('C:/Users/naxo/Dropbox/develop/datasc_ibm/test01.R')
dev.off()
source('C:/Users/naxo/Dropbox/develop/datasc_ibm/test01.R')
dev.off()
dev.off()
mycols=c(1:13,"orange")
for (j in c(1,4)){
jpeg(paste("C:/Users/naxo/Dropbox/develop/datasc_ibm/word_counts_ds_",j,".jpeg",sep=""),width=1200,height=800,quality = 100,units="px",pointsize = 22)
if (j==1) {cols=c(1,2,3:5)}
if (j==2) {cols=c(1,2,12:20)}
if (j==3) {cols=c(1,2,21:29)}
if (j==4) {cols=c(1,2,c(30:40)-24)}
res_end_plot=res_end[,cols]
myncols=ncol(res_end_plot)
thiskeywords=colnames(res_end_plot)[c(-1,-2)]
par(mfrow=c(2,2))
years=res_end_plot$year; n_all=res_end_plot$n_all; nyears=length(years)
plot(years,n_all)
plot(years,rep(1,nyears),col="white",ylim=c(0,max(res_end_plot[,3:myncols],na.rm=T)),main="Number of Articles related to ...")
for (i in 3:(myncols)){points(years,res_end_plot[,i],type="l",col=mycols[i-2])}
legend("topleft",legend=thiskeywords,lwd=1,col=mycols,cex=0.6,ncol=2)
plot(res_end_plot$year,rep(1,nyears),col="white",ylim=c(0,max(res_end_plot[,3:myncols]/res_end_plot$n_all,na.rm=T)),main="Number of Articles / Articles per year - corrected by all articles")
for (i in 3:myncols){
points(years,res_end_plot[,i]/n_all,type="l",col=mycols[i-2])}
plot(years,rep(1,nyears),col="white",ylim=c(0,0.00001),main="Number of Articles / Articles per year - normalized (same sum for each keyword)")
for (i in 3:myncols){
points(years,res_end_plot[,i]/n_all/sum(res_end_plot[,i],na.rm=T),type="l",col=mycols[i-2])}#*10000
par(mfrow=c(1,1));  dev.off()
}
source('C:/Users/naxo/Dropbox/develop/datasc_ibm/test01.R')
source('C:/Users/naxo/Dropbox/develop/datasc_ibm/test01.R')
source('C:/Users/naxo/Dropbox/develop/datasc_ibm/test01.R')
source('C:/Users/naxo/Dropbox/develop/datasc_ibm/test01.R')
source('C:/Users/naxo/Dropbox/develop/datasc_ibm/test01.R')
res_end_plot[50:60,]
mycols=c(1:13,"orange")
for (j in c(1,2,3,4)){
jpeg(paste("C:/Users/naxo/Dropbox/develop/datasc_ibm/word_counts_ds_",j,".jpeg",sep=""),width=1200,height=800,quality = 100,units="px",pointsize = 22)
if (j==1) {cols=c(1,2,3:5)}
if (j==2) {cols=c(1,2,6:9)}
if (j==3) {cols=c(1,2,c(10:15))}
if (j==4) {cols=c(1,2,16:20)}
res_end_plot=res_end[,cols]
myncols=ncol(res_end_plot)
thiskeywords=colnames(res_end_plot)[c(-1,-2)]
par(mfrow=c(2,2))
years=res_end_plot$year; n_all=res_end_plot$n_all; nyears=length(years)
plot(years,n_all)
plot(years,rep(1,nyears),col="white",ylim=c(0,max(res_end_plot[,3:myncols],na.rm=T)),main="Number of Articles related to ...")
for (i in 3:(myncols)){points(years,res_end_plot[,i],type="l",col=mycols[i-2])}
legend("topleft",legend=thiskeywords,lwd=1,col=mycols,cex=0.6,ncol=2)
plot(res_end_plot$year,rep(1,nyears),col="white",ylim=c(0,max(res_end_plot[,3:myncols]/res_end_plot$n_all,na.rm=T)),main="Number of Articles / Articles per year - corrected by all articles")
for (i in 3:myncols){
points(years,res_end_plot[,i]/n_all,type="l",col=mycols[i-2])}
plot(years,rep(1,nyears),col="white",ylim=c(0,0.00001),main="Number of Articles / Articles per year - normalized (same sum for each keyword)")
for (i in 3:myncols){
points(years,res_end_plot[,i]/sum(res_end_plot[,i],na.rm=T),type="l",col=mycols[i-2])}#*10000
par(mfrow=c(1,1));  dev.off()
}
n_all
mycols=c(1:13,"orange")
for (j in c(1,2,3,4)){
jpeg(paste("C:/Users/naxo/Dropbox/develop/datasc_ibm/word_counts_ds_",j,".jpeg",sep=""),width=1200,height=800,quality = 100,units="px",pointsize = 22)
if (j==1) {cols=c(1,2,3:5)}
if (j==2) {cols=c(1,2,6:9)}
if (j==3) {cols=c(1,2,c(10:15))}
if (j==4) {cols=c(1,2,16:20)}
res_end_plot=res_end[,cols]
myncols=ncol(res_end_plot)
thiskeywords=colnames(res_end_plot)[c(-1,-2)]
par(mfrow=c(2,2))
years=res_end_plot$year; n_all=res_end_plot$n_all; nyears=length(years)
plot(years,n_all)
plot(years,rep(1,nyears),col="white",ylim=c(0,max(res_end_plot[,3:myncols],na.rm=T)),main="Number of Articles related to ...")
for (i in 3:(myncols)){points(years,res_end_plot[,i],type="l",col=mycols[i-2])}
legend("topleft",legend=thiskeywords,lwd=1,col=mycols,cex=0.6,ncol=2)
plot(res_end_plot$year,rep(1,nyears),col="white",ylim=c(0,max(res_end_plot[,3:myncols]/res_end_plot$n_all,na.rm=T)),main="Number of Articles / Articles per year - corrected by all articles")
for (i in 3:myncols){
points(years,res_end_plot[,i]/n_all,type="l",col=mycols[i-2])}
plot(years,rep(1,nyears),col="white",ylim=c(0,0.1),main="Number of Articles / Articles per year - normalized (same sum for each keyword)")
for (i in 3:myncols){
#points(years,res_end_plot[,i]/n_all/sum(res_end_plot[,i],na.rm=T),type="l",col=mycols[i-2])}#*10000
points(years,res_end_plot[,i]/sum(res_end_plot[,i],na.rm=T),type="l",col=mycols[i-2])}#*10000
par(mfrow=c(1,1));  dev.off()
}
mycols=c(1:13,"orange")
for (j in c(1,2,3,4)){
jpeg(paste("C:/Users/naxo/Dropbox/develop/datasc_ibm/word_counts_ds_",j,".jpeg",sep=""),width=1200,height=800,quality = 100,units="px",pointsize = 22)
if (j==1) {cols=c(1,2,3:5)}
if (j==2) {cols=c(1,2,6:9)}
if (j==3) {cols=c(1,2,c(10:15))}
if (j==4) {cols=c(1,2,16:20)}
res_end_plot=res_end[,cols]
myncols=ncol(res_end_plot)
thiskeywords=colnames(res_end_plot)[c(-1,-2)]
par(mfrow=c(2,2))
years=res_end_plot$year; n_all=res_end_plot$n_all; nyears=length(years)
plot(years,n_all,type="l")
plot(years,rep(1,nyears),col="white",ylim=c(0,max(res_end_plot[,3:myncols],na.rm=T)),main="Number of Articles related to ...")
for (i in 3:(myncols)){points(years,res_end_plot[,i],type="l",col=mycols[i-2])}
legend("topleft",legend=thiskeywords,lwd=1,col=mycols,cex=0.6,ncol=2)
plot(res_end_plot$year,rep(1,nyears),col="white",ylim=c(0,max(res_end_plot[,3:myncols]/res_end_plot$n_all,na.rm=T)),main="Number of Articles / Articles per year - corrected by all articles")
for (i in 3:myncols){
points(years,res_end_plot[,i]/n_all,type="l",col=mycols[i-2])}
plot(years,rep(1,nyears),col="white",ylim=c(0,0.00001),main="Number of Articles / Articles per year - normalized (same sum for each keyword)")
for (i in 3:myncols){
#points(years,res_end_plot[,i]/n_all/sum(res_end_plot[,i],na.rm=T),type="l",col=mycols[i-2])}#*10000
points(years,res_end_plot[,i]/n_all/sum(res_end_plot[,i],na.rm=T),type="l",col=mycols[i-2])}#*10000
par(mfrow=c(1,1));  dev.off()
}
mycols=c(1:13,"orange")
for (j in c(1,2,3,4)){
jpeg(paste("C:/Users/naxo/Dropbox/develop/datasc_ibm/word_counts_ds_",j,".jpeg",sep=""),width=1800,height=1200,quality = 100,units="px",pointsize = 22)
if (j==1) {cols=c(1,2,3:5)}
if (j==2) {cols=c(1,2,6:9)}
if (j==3) {cols=c(1,2,c(10:15))}
if (j==4) {cols=c(1,2,16:20)}
res_end_plot=res_end[,cols]
myncols=ncol(res_end_plot)
thiskeywords=colnames(res_end_plot)[c(-1,-2)]
par(mfrow=c(2,2))
years=res_end_plot$year; n_all=res_end_plot$n_all; nyears=length(years)
plot(years,n_all,type="l")
plot(years,rep(1,nyears),col="white",ylim=c(0,max(res_end_plot[,3:myncols],na.rm=T)),main="Number of Articles related to ...")
for (i in 3:(myncols)){points(years,res_end_plot[,i],type="l",col=mycols[i-2])}
legend("topleft",legend=thiskeywords,lwd=1,col=mycols,cex=0.6,ncol=2)
plot(res_end_plot$year,rep(1,nyears),col="white",ylim=c(0,max(res_end_plot[,3:myncols]/res_end_plot$n_all,na.rm=T)),main="Number of Articles / Articles per year - corrected by all articles")
for (i in 3:myncols){
points(years,res_end_plot[,i]/n_all,type="l",col=mycols[i-2])}
plot(years,rep(1,nyears),col="white",ylim=c(0,0.00001),main="Number of Articles / Articles per year - normalized (same sum for each keyword)")
for (i in 3:myncols){
#points(years,res_end_plot[,i]/n_all/sum(res_end_plot[,i],na.rm=T),type="l",col=mycols[i-2])}#*10000
points(years,res_end_plot[,i]/n_all/sum(res_end_plot[,i],na.rm=T),type="l",col=mycols[i-2])}#*10000
par(mfrow=c(1,1));  dev.off()
}
mycols=c(1:13,"orange")
for (j in c(1,2,3,4)){
jpeg(paste("C:/Users/naxo/Dropbox/develop/datasc_ibm/word_counts_ds_",j,".jpeg",sep=""),width=1800,height=1200,quality = 100,units="px",pointsize = 22)
if (j==1) {cols=c(1,2,3:5)}
if (j==2) {cols=c(1,2,6:9)}
if (j==3) {cols=c(1,2,c(10:15))}
if (j==4) {cols=c(1,2,16:20)}
res_end_plot=res_end[,cols]
myncols=ncol(res_end_plot)
thiskeywords=colnames(res_end_plot)[c(-1,-2)]
par(mfrow=c(2,2))
years=res_end_plot$year; n_all=res_end_plot$n_all; nyears=length(years)
plot(years,n_all,type="l")
plot(years,rep(1,nyears),col="white",ylim=c(0,max(res_end_plot[,3:myncols],na.rm=T)),main="Number of Articles related to ...")
for (i in 3:(myncols)){points(years,res_end_plot[,i],type="l",col=mycols[i-2])}
legend("topleft",legend=thiskeywords,lwd=1,col=mycols,cex=0.6,ncol=2)
plot(res_end_plot$year,rep(1,nyears),col="white",ylim=c(0,max(res_end_plot[,3:myncols]/res_end_plot$n_all,na.rm=T)),main="Number of Articles / Articles per year - corrected by all articles")
for (i in 3:myncols){
points(years,res_end_plot[,i]/n_all,type="l",col=mycols[i-2])}
plot(years,rep(1,nyears),col="white",ylim=c(0,0.00001),main="Number of Articles / Articles per year / sum(Articles) per Keyword\nnormalized (same sum for each keyword)")
for (i in 3:myncols){
#points(years,res_end_plot[,i]/n_all/sum(res_end_plot[,i],na.rm=T),type="l",col=mycols[i-2])}#*10000
points(years,res_end_plot[,i]/n_all/sum(res_end_plot[,i],na.rm=T),type="l",col=mycols[i-2])}#*10000
par(mfrow=c(1,1));  dev.off()
}
mycols=c(1:13,"orange")
for (j in c(1,2,3,4)){
jpeg(paste("C:/Users/naxo/Dropbox/develop/datasc_ibm/word_counts_ds_",j,".jpeg",sep=""),width=1800,height=1200,quality = 100,units="px",pointsize = 22)
if (j==1) {cols=c(1,2,3:5)}
if (j==2) {cols=c(1,2,6:9)}
if (j==3) {cols=c(1,2,c(10:15))}
if (j==4) {cols=c(1,2,16:20)}
res_end_plot=res_end[,cols]
myncols=ncol(res_end_plot)
thiskeywords=colnames(res_end_plot)[c(-1,-2)]
par(mfrow=c(2,2))
years=res_end_plot$year; n_all=res_end_plot$n_all; nyears=length(years)
plot(years,n_all,type="l")
plot(years,rep(1,nyears),col="white",ylim=c(0,max(res_end_plot[,3:myncols],na.rm=T)),main="Number of Articles related to ...",xlab="Years",ylab="n")
for (i in 3:(myncols)){points(years,res_end_plot[,i],type="l",col=mycols[i-2])}
legend("topleft",legend=thiskeywords,lwd=1,col=mycols,cex=0.6,ncol=2)
plot(res_end_plot$year,rep(1,nyears),col="white",ylim=c(0,max(res_end_plot[,3:myncols]/res_end_plot$n_all,na.rm=T)),main="Number of Articles / Articles per year - corrected by all articles",xlab="Years",ylab="")
for (i in 3:myncols){
points(years,res_end_plot[,i]/n_all,type="l",col=mycols[i-2])}
plot(years,rep(1,nyears),col="white",ylim=c(0,0.00001),main="Number of Articles / Articles per year / sum(Articles) per Keyword\nnormalized (same sum for each keyword)",xlab="Years",ylab="")
for (i in 3:myncols){
#points(years,res_end_plot[,i]/n_all/sum(res_end_plot[,i],na.rm=T),type="l",col=mycols[i-2])}#*10000
points(years,res_end_plot[,i]/n_all/sum(res_end_plot[,i],na.rm=T),type="l",col=mycols[i-2],xlab="Years",ylab="")}#*10000
par(mfrow=c(1,1));  dev.off()
}
mycols=c(1:13,"orange")
for (j in c(1,2,3,4)){
jpeg(paste("C:/Users/naxo/Dropbox/develop/datasc_ibm/word_counts_ds_",j,".jpeg",sep=""),width=3600,height=2000,quality = 100,units="px",pointsize = 22)
if (j==1) {cols=c(1,2,3:5)}
if (j==2) {cols=c(1,2,6:9)}
if (j==3) {cols=c(1,2,c(10:15))}
if (j==4) {cols=c(1,2,16:20)}
res_end_plot=res_end[,cols]
myncols=ncol(res_end_plot)
thiskeywords=colnames(res_end_plot)[c(-1,-2)]
par(mfrow=c(2,2))
years=res_end_plot$year; n_all=res_end_plot$n_all; nyears=length(years)
plot(years,n_all,type="l",lwd=2)
plot(years,rep(1,nyears),col="white",ylim=c(0,max(res_end_plot[,3:myncols],na.rm=T)),main="Number of Articles related to ...",xlab="Years",ylab="n")
for (i in 3:(myncols)){points(years,res_end_plot[,i],type="l",col=mycols[i-2])}
legend("topleft",legend=thiskeywords,lwd=2,col=mycols,cex=0.6,ncol=2)
plot(res_end_plot$year,rep(1,nyears),col="white",ylim=c(0,max(res_end_plot[,3:myncols]/res_end_plot$n_all,na.rm=T)),main="Number of Articles / Articles per year - corrected by all articles",xlab="Years",ylab="")
for (i in 3:myncols){
points(years,res_end_plot[,i]/n_all,type="l",col=mycols[i-2],lwd=2)}
plot(years,rep(1,nyears),col="white",ylim=c(0,0.00001),main="Number of Articles / Articles per year / sum(Articles) per Keyword\nnormalized (same sum for each keyword)",xlab="Years",ylab="")
for (i in 3:myncols){
#points(years,res_end_plot[,i]/n_all/sum(res_end_plot[,i],na.rm=T),type="l",col=mycols[i-2])}#*10000
points(years,res_end_plot[,i]/n_all/sum(res_end_plot[,i],na.rm=T),type="l",lwd=2,col=mycols[i-2],xlab="Years",ylab="")}#*10000
par(mfrow=c(1,1));  dev.off()
}
mycols=c(1:13,"orange")
for (j in c(1,2,3,4)){
jpeg(paste("C:/Users/naxo/Dropbox/develop/datasc_ibm/word_counts_ds_",j,".jpeg",sep=""),width=3600,height=2000,quality = 100,units="px",pointsize = 22)
if (j==1) {cols=c(1,2,3:5)}
if (j==2) {cols=c(1,2,6:9)}
if (j==3) {cols=c(1,2,c(10:15))}
if (j==4) {cols=c(1,2,16:20)}
res_end_plot=res_end[,cols]
myncols=ncol(res_end_plot)
thiskeywords=colnames(res_end_plot)[c(-1,-2)]
par(mfrow=c(2,2))
years=res_end_plot$year; n_all=res_end_plot$n_all; nyears=length(years)
mycex=2
plot(years,n_all,type="l",lwd=2,cex=mycex)
plot(years,rep(1,nyears),col="white",ylim=c(0,max(res_end_plot[,3:myncols],na.rm=T)),main="Number of Articles related to ...",xlab="Years",ylab="n",cex=mycex)
for (i in 3:(myncols)){points(years,res_end_plot[,i],type="l",col=mycols[i-2],lwd=2)}
legend("topleft",legend=thiskeywords,col=mycols,cex=mycex,ncol=2)
plot(res_end_plot$year,rep(1,nyears),col="white",ylim=c(0,max(res_end_plot[,3:myncols]/res_end_plot$n_all,na.rm=T)),main="Number of Articles / Articles per year - corrected by all articles",xlab="Years",ylab="",cex=mycex)
for (i in 3:myncols){
points(years,res_end_plot[,i]/n_all,type="l",col=mycols[i-2],lwd=2)}
plot(years,rep(1,nyears),col="white",ylim=c(0,0.00001),main="Number of Articles / Articles per year / sum(Articles) per Keyword\nnormalized (same sum for each keyword)",xlab="Years",ylab="",cex=mycex)
for (i in 3:myncols){
#points(years,res_end_plot[,i]/n_all/sum(res_end_plot[,i],na.rm=T),type="l",col=mycols[i-2])}#*10000
points(years,res_end_plot[,i]/n_all/sum(res_end_plot[,i],na.rm=T),type="l",lwd=2,col=mycols[i-2],xlab="Years",ylab="")}#*10000
par(mfrow=c(1,1));  dev.off()
}
mycols=c(1:13,"orange")
for (j in c(1,2,3,4)){
jpeg(paste("C:/Users/naxo/Dropbox/develop/datasc_ibm/word_counts_ds_",j,".jpeg",sep=""),width=3600,height=2000,quality = 100,units="px",pointsize = 22)
if (j==1) {cols=c(1,2,3:5)}
if (j==2) {cols=c(1,2,6:9)}
if (j==3) {cols=c(1,2,c(10:15))}
if (j==4) {cols=c(1,2,16:20)}
res_end_plot=res_end[,cols]
myncols=ncol(res_end_plot)
thiskeywords=colnames(res_end_plot)[c(-1,-2)]
par(mfrow=c(2,2))
years=res_end_plot$year; n_all=res_end_plot$n_all; nyears=length(years)
mycex=2
plot(years,n_all,type="l",lwd=2,cex.main=mycex)
plot(years,rep(1,nyears),col="white",ylim=c(0,max(res_end_plot[,3:myncols],na.rm=T)),main="Number of Articles related to ...",xlab="Years",ylab="n",cex.main=mycex)
for (i in 3:(myncols)){points(years,res_end_plot[,i],type="l",col=mycols[i-2],lwd=2)}
legend("topleft",legend=thiskeywords,col=mycols,cex=mycex,ncol=2,lwd=2)
plot(res_end_plot$year,rep(1,nyears),col="white",ylim=c(0,max(res_end_plot[,3:myncols]/res_end_plot$n_all,na.rm=T)),main="Number of Articles / Articles per year - corrected by all articles",xlab="Years",ylab="",cex.main=mycex)
for (i in 3:myncols){
points(years,res_end_plot[,i]/n_all,type="l",col=mycols[i-2],lwd=2)}
plot(years,rep(1,nyears),col="white",ylim=c(0,0.00001),main="Number of Articles / Articles per year / sum(Articles) per Keyword\nnormalized (same sum for each keyword)",xlab="Years",ylab="",cex.main=mycex)
for (i in 3:myncols){
#points(years,res_end_plot[,i]/n_all/sum(res_end_plot[,i],na.rm=T),type="l",col=mycols[i-2])}#*10000
points(years,res_end_plot[,i]/n_all/sum(res_end_plot[,i],na.rm=T),type="l",lwd=2,col=mycols[i-2],xlab="Years",ylab="")}#*10000
par(mfrow=c(1,1));  dev.off()
}
source('C:/Users/naxo/Dropbox/fel/202009/surv01.R')
cn=paste("q",vni,sep=""); cnlong=surv_cn$colname_long[surv_cn$id==cn]
cat("\n",cn,": ",cnlong,sep="")
vals01=surv01[,cn]; vals01=vals01[!(vals01 %in% c(NA))]; vals_n=length(vals01)#[c(!(vals01 %in% c(NA)))])
vals_mean=mean(vals01)
cat(", n=",vals_n,sep="")
tt=wilcox.test(vals01,alternative = "greater",paired=FALSE,mu=3); cat(", p-value=",tt$p.value[1], ", mean=",vals_mean,sep=""); rm(tt);##tt=t.test(vals01,alternative = "greater",mu=3); print(tt)
tt
tt=wilcox.test(vals01,alternative = "greater",paired=FALSE,mu=3); cat(", p-value=",tt$p.value[1], ", mean=",vals_mean,sep=""); rm(tt);##tt=t.test(vals01,alternative = "greater",mu=3); print(tt)
tt
wilcox.test(vals01,alternative = "greater",paired=FALSE,mu=3)
x=
wilcox.test(vals01,alternative = "greater",paired=FALSE,mu=3)
x
print(x)
source('C:/Users/naxo/Dropbox/fel/202009/surv01.R')
?sleep
?Sys.sleep
source('C:/develop/helheartbeat/createData.R')
source('C:/develop/helheartbeat/createData.R')
setwd("c:/develop/helheartbeat/data")
Sys.sleep(0.2)
rval=runif(1, min=0, max=1)
source('C:/develop/helheartbeat/createData.R')
rval
if ((i %% 10)==0) {rval=min(rval+0.8,1)}
rval
source('C:/develop/helheartbeat/createData.R')
source('C:/develop/helheartbeat/createData.R')
install.packages("websocket")
library(websocket)
source('C:/develop/helheartbeat/createData.R')
source('C:/develop/helheartbeat/createData.R')
source('C:/develop/helheartbeat/createData.R')
source('C:/develop/helheartbeat/createData.R')
source('C:/develop/helheartbeat/createData.R')
source('C:/develop/helheartbeat/createData.R')
source('C:/develop/helheartbeat/createData.R')
source('C:/develop/helheartbeat/createData.R')
source('C:/develop/helheartbeat/createData.R')
source('C:/develop/helheartbeat/createData.R')
?WebSocket$new
?WebSocket
source('C:/develop/helheartbeat/createData.R')
source('C:/develop/helheartbeat/createData.R')
source('C:/develop/helheartbeat/createData.R')
source('C:/develop/helheartbeat/createData.R')
source('C:/develop/helheartbeat/createData.R')
source('C:/develop/helheartbeat/createData.R')
source('C:/develop/helheartbeat/createData.R')
source('C:/develop/helheartbeat/createData.R')
source('C:/develop/helheartbeat/createData.R')
source('C:/develop/helheartbeat/createData.R')
source('C:/develop/helheartbeat/createData.R')
source('C:/develop/helheartbeat/createData.R')
source('C:/develop/helheartbeat/createData.R')
ws$readyState()
source('C:/develop/helheartbeat/createData.R')
